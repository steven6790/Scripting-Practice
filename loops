#!/usr/bin/bash
# Loops

# Bash for loop
: 'for arg in [list]
do
	command(s)...
done'

# Each pass through the loop, arg takes on the value of each successive value in the list.

# loop on array member
echo "for loop"
NAMES=(Joe Jenny Sara Tony)
for N in ${NAMES[@]} ; do 
	echo "My name is $N"
done

# loop on command output results
: 'for f in $( ls prog.sh /etc/locatime) ; do
	echo "File is $f"
done'

# Bash while loop

#basic construct
: ' while [ condition ]
do 
	commands
done '

# The whil construct tests for a condition, and if true, executes commands.
# Keeps looping as long as condition is true
echo "while loop"
COUNT=4
while [ $COUNT -gt 0 ]; do 
	echo "Value of count is: $COUNT"
	COUNT=$(($COUNT - 1))
done

# Bash until loop

#basic construct
: 'until [ condition ]
do 
	command(s)...
done'

# The until construct tests for a condition, and if false, executes commands. 
# It keeps looping as long as the condition is false (opposite of while construct)
echo "until loop"
COUNT=1
until [ $COUNT -gt 5 ]; do
	echo "Value of count is: $COUNT"
	COUNT=$(($COUNT + 1))
done

# "break" and "continue" statements

# break and continue can be used to control the loop execution of for, while and until constructs.
# continue is used to skip the rest of a particular loop iteration, whereas break is used to skip the entire rest of loop. 

# Prints out 0,1,2,3,4
echo "break and continue statements"
COUNT=0
while [ $COUNT -ge 0 ]; do
	echo "Value of COUNT is: $COUNT"
	COUNT=$((COUNT+1))
	if [ $COUNT -ge 5 ] ; then
		break
	fi
done

# Prints out only odd numbers - 1,3,5,7,9
echo "Print only odd numbers"
COUNT=0
while [ $COUNT -lt 10 ]; do
	COUNT=$((COUNT+1))
	# Check if COUNT is even
	if [ $(($COUNT % 2)) = 0 ] ; then
		continue
	fi
	echo $COUNT
done


